# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iQwO6O96uFOZyeZGRvwyeDLiMS88Bm4b
"""

import streamlit as st
import joblib
import pandas as pd
from sklearn.preprocessing import LabelEncoder
import requests
from sklearn.base import BaseEstimator, TransformerMixin
import warnings
warnings.filterwarnings('ignore')

# Custom encoder class (same as the one used during model training)
class CustomEncoder(BaseEstimator, TransformerMixin):
    def fit(self, X, y=None):
        X = X.copy()
        self.occupation_means = X.groupby('Occupation')['Credit_Score'].mean()
        self.payment_of_min_amount_means = X.groupby('Payment_of_Min_Amount')['Credit_Score'].mean()
        self.payment_behaviour_means = X.groupby('Payment_Behaviour')['Credit_Score'].mean()
        self.credit_mix_map = {'Bad': 0, 'Standard': 1, 'Good': 2}
        return self

    def transform(self, X):
        X = X.copy()
        X['Occupation_encoded'] = X['Occupation'].map(self.occupation_means)
        X['Payment_of_Min_Amount_encoded'] = X['Payment_of_Min_Amount'].map(self.payment_of_min_amount_means)
        X['Payment_Behaviour_encoded'] = X['Payment_Behaviour'].map(self.payment_behaviour_means)
        X['Credit_Mix'] = X['Credit_Mix'].map(self.credit_mix_map)
        X.drop(['Occupation', 'Payment_of_Min_Amount', 'Payment_Behaviour'], axis=1, inplace=True)
        return X

# Load pre-trained pipeline model from the .sav file
pipeline = joblib.load('best_pipeline_credit.sav')

# Streamlit UI
st.title('Credit Score Prediction')

# Collecting user input in the form of numeric values
col1, col2 = st.columns(2)

with col1:
    Age = st.number_input('Age', min_value=14, max_value=100, value=30)
    Annual_Income = st.number_input('Annual Income', min_value=1000, value=50000)
    Outstanding_Debt = st.number_input('Outstanding Debt', min_value=0, value=10000)
    Interest_Rate = st.number_input('Interest Rate (%)', min_value=0.0, max_value=50.0, value=5.0)
    Num_Credit_Inquiries = st.number_input('Number of Credit Inquiries', min_value=0, value=1)

with col2:
    Total_EMI_per_month = st.number_input('Total EMI per Month', min_value=0, value=500)
    Delay_from_due_date = st.number_input('Delay from Due Date (days)', min_value=0, value=5)
    Num_Credit_Card = st.number_input('Number of Credit Cards', min_value=0, value=2)
    Num_Bank_Accounts = st.number_input('Number of Bank Accounts', min_value=0, value=3)
    Credit_History_Age = st.number_input('Credit History Age (in years)', min_value=0, value=10)
    Num_of_Delayed_Payment = st.number_input('Number of Delayed Payments', min_value=0, value=3)

Occupation = st.selectbox('Occupation', ['Lawyer', 'Engineer', 'Architect', 'Mechanic', 'Scientist', 'Accountant', 'Developer', 'Media_Manager', 'Teacher','Entrepreneur', 'Doctor', 'Journalist', 'Manager', 'Musician', 'Writer'])
Payment_of_Min_Amount = st.selectbox('Payment of Minimum Amount', ['Yes', 'No'])
Payment_Behaviour = st.selectbox('Payment Behaviour', ['Low_spent_Small_value_payments', 'High_spent_Medium_value_payments', 'Low_spent_Medium_value_payments', 'High_spent_Large_value_payments', 'High_spent_Small_value_payments', 'Low_spent_Large_value_payments'])

# Prepare the input data
input_data = pd.DataFrame({
    'Age': [Age],
    'Annual_Income': [Annual_Income],
    'Outstanding_Debt': [Outstanding_Debt],
    'Interest_Rate': [Interest_Rate],
    'Total_EMI_per_month': [Total_EMI_per_month],
    'Num_Credit_Inquiries': [Num_Credit_Inquiries],
    'Delay_from_due_date': [Delay_from_due_date],
    'Num_Credit_Card': [Num_Credit_Card],
    'Num_Bank_Accounts': [Num_Bank_Accounts],
    'Credit_History_Age': [Credit_History_Age],
    'Num_of_Delayed_Payment': [Num_of_Delayed_Payment],
    'Occupation': [Occupation],
    'Payment_of_Min_Amount': [Payment_of_Min_Amount],
    'Payment_Behaviour': [Payment_Behaviour]
})

# Apply custom encoding
encoder = CustomEncoder()
input_data_encoded = encoder.fit_transform(input_data)

# Make prediction when the user clicks the button
if st.button('Predict Credit Score'):
    prediction = pipeline.predict(input_data_encoded)
    st.success(f'The predicted credit score is: {prediction[0]}')